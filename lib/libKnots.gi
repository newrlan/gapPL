# Knot diagrams:
# диаграммы узлов задаются следующим образом: каждой двойной точке присваивается
# имя. Затем на узле выбирается произвольное направление и начальная точка.
# После чего по направлению обхода выписываются последовательно имена вершин, с
# указанием того сверху ли мы проходим эту двойную точку или снизу. Этот список
# назовем кодом узла. Затем вычислим ориентацию каждой вершины и запишем их в
# отдельный список.

InstallValue( Trefoil,
rec(kod:=[["a",+1],["c",-1],["b",+1],["a",-1],["c",+1],["b",-1]],
                orient:=[["a",-1],["b",-1],["c",-1]])
);

InstallValue( Figure8,
rec(kod:=[ ["a",+1],["d",-1],["c",+1],["a",-1],["b",+1],["c",-1],["d",+1],["b",-1] ],
              orient:=[ ["a",1],["b",1],["c",-1],["d",-1] ])
);

InstallValue( Unknot,
rec(kod:=[ ["a",+1],["b",-1],["c",-1],["a",-1],["b",1],["c",1] ],
          orient:=[ ["a",+1],["b",1],["c",-1] ])
);

InstallValue( Knot7_7,
rec(kod:=[ ["a",1],["b",-1],["c",1],["d",-1],["e",1],["a",-1],["f",1],["c",-1],["g",1],["e",-1],["d",1],["g",-1],["b",1],["f",-1] ],
             orient:=[ ["a",-1],["b",1],["c",1],["d",-1],["e",-1],["f",-1],["g",1] ])
);

#################################################################

InstallGlobalFunction( MirrorKnot, function(knot)

local s, name, mirror;

mirror:=StructuralCopy(knot);
s:=1;
for name in mirror.kod do
	mirror.kod[s][2]:= (-1) * mirror.kod[s][2];
	s:=s+1;
od;

return mirror;
end );
